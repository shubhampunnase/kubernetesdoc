Kubernetes labels are powerful tools that provide several advantages in managing and organizing your resources. Here are some key benefits:

1. **Organizational Flexibility**: Labels allow you to categorize and group Kubernetes resources (like pods, services, and deployments)
 in a way that makes sense for your application or environment. You can use them to denote environments (e.g., `env=production`, `env=staging`),
  application versions, or any other custom attributes.

2. **Efficient Resource Management**: By applying labels, you can easily manage and interact with multiple resources at once. For instance, 
you can select and operate on a subset of resources using label selectors, making deployments, scaling, and updates more efficient.

3. **Dynamic Querying**: Labels enable dynamic querying of resources. You can filter resources based on their labels, which is helpful for monitoring,
 logging, and managing complex applications with many components.

4. **Simplified Service Discovery**: Services in Kubernetes can use labels to discover and interact with the appropriate pods.
 This decouples services from specific pod instances, allowing for more dynamic and flexible configurations.

5. **Enhanced CI/CD Pipelines**: In continuous integration and continuous deployment (CI/CD) workflows, labels can help identify which resources
 should be deployed, tested, or rolled back, based on version labels or environment specifications.

6. **Improved Scaling and Load Balancing**: When scaling applications, you can use labels to ensure that specific pods are targeted for scaling operations,
 helping to optimize resource usage and performance.

7. **Operational Policies**: You can enforce operational policies using labels, such as network policies or resource quotas, allowing for better security
 and resource management based on application or team requirements.

8. **Ease of Monitoring and Logging**: Many monitoring and logging tools can aggregate data based on labels, providing better insights and operational 
visibility into the performance and behavior of your applications.

9. **Seamless Integration with Tools**: Labels integrate well with various Kubernetes tools and ecosystems, such as Helm, Prometheus,
 and Istio, enhancing their ability to manage and monitor resources effectively.

10. **Customization**: Labels are user-defined, meaning you can tailor them to fit your specific needs and workflows, making them a 
versatile tool in your Kubernetes toolkit.

Overall, labels enhance the operational capabilities of Kubernetes, making it easier to manage complex, distributed applications efficiently.

#kubectl get nodes

Remove taint form master just for practical
#kubectl taint nodes --all node-role.kuberenetes.io/master

#kubectl run web-server --image=nginx --replicas=12  {now you can see all 12 pods are in both the node master and worker as well}

#kubectl delete deployment web-server

Create lables 
#kubectl get nodes

#kubectl label node master node=master
#kubectl label node node01 node=worker 

#kubectl describe node master

pod.yaml
apiVersion: v1
kind: Pod
metadata:
  name: dev-server
spec:
  containers:
    - image: nginx
      name: dev-server
  nodeSelector:
    node: "worker"

pod1.yaml
apiVersion: v1
kind: Pod
metadata:
  name: pord-server
spec:
  containers:
    - image: naginx
      name: pord-server
  nodeSelector:
    node: "master"

build lable with the namespace
create namesapce
#kubectl create namesapce dev-team
#kubectl create namesapce prod-team
check
#kubectl get namespace
now create 12 replcias in prod and dev 
#kubectl run -n dev-team dev-server --image=nginx --replicas=12
#kubectl run -n prod-team prod-server --image=naginx --replicas=12
here you can see pos are in diffrent nodes if we want all pods are in one node only so we need to bind namespace with node

#kubectl -n dev-team delete deployment dev-server



How to bind namespace with node do some seeting on api server 
chnage
some seeting in api server
# go in to master node /etc/kubernetes/ go in to #cd manidests
#vim kube-apiserver.yaml
check 18 number line 

priviusly
- --enable-admission-plugins=NodeRestriction 
#add only PodNodeSelector
- --enable-admission-plugins=NodeRestriction,PodNodeSelector {Minimal time server will down}



#next need to do some seeting in namespace to buind node 
##kubectl edit namesapce dev-team
add pereameter 
metadata:
  creationTimestamp: "some time therebydefault"
  name: dev-team
  #this line you need to add
  annotations:
    scheduler.alpha.kubernetes.io/node-selector: "node-worker"


now you can create pod 
#kubectl run -n dev-teamdev-server --image=nginx --replicas=12
check 
#kubectl -n dev-team get pods -o wide

Remove able form node
#kubectl describe node node01
#kubectl label node node01 node-
check again 

for remove namespace
##kubectl edit namesapce dev-team
add pereameter 
metadata:
  creationTimestamp: "some time therebydefault"
  name: dev-team
  {#this line you need to add}
  #annotations:
  #  scheduler.alpha.kubernetes.io/node-selector: "node-worker"  {removed this 2 lines}
